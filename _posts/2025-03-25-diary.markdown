---
layout: post
title: ログイン機構
date: 2025-03-24 21:00:00
description:  # Add post description (optional)
img: postimg/computer_password_wasureta.png # Add image post (optional)
fig-caption: # Add figcaption (optional)
tags: [日記]
---

私は抽象的な物事に対しては『働く細胞』のように擬人化することで理解しようとするタイプです。<br>
今日学んだプログラムを自分がなんとか理解できるように整理。<br>
プログラム内のコメントはchatGPTに記入してもらっています。<br>

```jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>ログイン画面</title>
<link rel="stylesheet" type="text/css" href="/chap8/css/style.scc"/>
</head>
<body>
	<h1>ログイン画面</h1>
	<form action="./login" method="post">
		<table>
			<tr><th>ユーザーID</th><td><input type="text" name="userId"></td></tr>
			<tr><th>パスワード</th><td><input type="password" name="password"></td></tr>
			<tr><th>名前</th><td><input type="text" name="name"></td></tr>
		</table>
		<input type="submit" value="ログイン">
	</form>
</body>
</html>
```

ここで今日に関係する仕事をしている人たちは<br>
formタグさん「情報を送り付ける型を用意するよ。」<br>
action属性さん「ここに送りつけるよ！」<br>
method属性さん「post型(formで送る場合は他はget型のみ)送るよ！」<br>
type="submit"属性さん「ここを押したタイミングで送るよ」<br>
で、以下のファイルに送られる。

```java
package controller; 
// コントローラ層のパッケージに属していることを示しますわ

import java.io.IOException; 
// 入出力エラー（たとえば通信失敗など）を扱うためのクラス

import javax.servlet.RequestDispatcher; 
// 他のリソース（JSPなど）へ処理を転送するための仕組み
import javax.servlet.ServletException; 
// サーブレット処理中に起きた例外を扱うためのクラス
import javax.servlet.annotation.WebServlet; 
// アノテーションでURLマッピングを定義できる機能
import javax.servlet.http.HttpServlet; 
// サーブレットの基本クラス。このクラスを継承して機能を実装しますの
import javax.servlet.http.HttpServletRequest; 
// クライアントから送られたリクエスト情報を扱うクラス
import javax.servlet.http.HttpServletResponse; 
// サーバーからクライアントへのレスポンス情報を扱うクラス

@WebServlet("/login")
// このサーブレットが「/login」というURLで呼び出されるように指定していますの
public class LoginController extends HttpServlet{ 
// HttpServletを継承して、Webアプリの制御を担当するクラスですわ
	private static final long serialVersionUID = 1L;
	// シリアライズのバージョン管理に使われるお決まりの番号ですの（気にしなくても動きますが、入れておくのが慣習ですわ）
	protected void doPost(HttpServletRequest req, HttpServletResponse res)throws ServletException, IOException {
	// POSTメソッドでリクエストが来たときの処理をここに書きますの
		req.setCharacterEncoding("UTF-8");
		// リクエストの文字エンコーディングをUTF-8に指定（文字化け防止ですわ）
		String userId = req.getParameter("userId");
		// フォームから送られた"userId"パラメータを取得しますの
		String password = req.getParameter("password");
		String name = req.getParameter("name");
		
		req.setAttribute("userId", userId);
		// JSPに渡すために"userId"をリクエスト属性に保存
		req.setAttribute("password", password);
		req.setAttribute("name", name);
			
		RequestDispatcher rd = req.getRequestDispatcher("/loginResult.jsp");
		// "loginResult.jsp" というJSPに処理を転送する準備ですの
		rd.forward(req, res);
		// JSPに制御を渡します。これでHTMLのレスポンスが生成されるのですわ
	}
}
```
login.jspからデータが送られてきた段階で、<br>
doPost(HttpServletRequest req, HttpServletResponse res)の引数、<br>
reqの中には送られてきた情報がパンパンに詰められている。<br>
resの中は空っぽ。

doPostメソッドは、reqの中身を自身の変数にとりだした後、送り先でも扱うことができるようにリクエストスコープに詰めなおし、<br>
resの中には何も入れず、reloginResult.jspにreq,res情報を丸投げしている。

```jsp
<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>ログイン結果</title>
<link rel="stylesheet" type="text/css" href="/chap8/css/style.css"/>
</head>
<body>
	<h2>ログイン結果</h2>
	<%
		String name = (String)request.getAttribute("name");
		// サーブレットから送られてきた「name」属性を取得して、変数nameに代入
	%>
	<p>
	 ようこそ、<%= name %>さん！
	</p>
</body>
</html>
```
正しく処理されると、最後にこのページが表示！<br>
このコードのポイントは、<br>
String name = (String)request.getAttribute("name");<br>
でObject型からString型にキャストしているところ。

####いつの間にObject型になっていたの？<br>
インターフェース:javax.servlet.ServletRequest内の<br>
public Object getAttribute(String name) の処理でObjectになっている。<br>
このインターフェースを HttpServletRequest が継承していて、それをimportすることで<br>
req.setAttribute("userId", userId); <br>
の時に利用している。

メモ：かくかくしかじか